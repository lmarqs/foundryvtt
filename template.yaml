Transform: AWS::Serverless-2016-10-31

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id

  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id

  DomainName:
    Type: String
    Default: foundry........

  EC2InstanceType:
    Type: String
    Default: t2.micro

  AMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: Do not change it, unless you know what you are doing
    Default: /aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id

Resources:
  GameS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-server-s3-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${GameS3Bucket}
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:GetObjectAttributes
                  - s3:GetObjectAcl
                  - s3:PutObjectAcl
                Resource: !Sub arn:aws:s3:::${GameS3Bucket}/*

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  EC2KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub ${AWS::StackName}-ec2-key-pair
      KeyFormat: pem
      KeyType: rsa

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      KeyName: !Ref EC2KeyPair
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 30
            DeleteOnTermination: true
            Encrypted: false
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo echo GAME_S3_BUCKET=${GameS3Bucket} >> /etc/environment
          sudo apt update -y
          curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt install -y awscli unzip nginx nodejs
          sudo npm install -g pm2@latest
          su - ubuntu -c 'aws s3 sync s3://${GameS3Bucket}/scripts /home/ubuntu/foundryvtt/scripts'
          sudo chmod +x /home/ubuntu/foundryvtt/scripts/*.sh

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupName: !Sub ${AWS::StackName}-server-sg
      GroupDescription: Security group for the Foundry VTT server
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          Description: All egress
          IpProtocol: -1
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          Description: HTTPS
          FromPort: 443
          IpProtocol: TCP
          ToPort: 443
        - CidrIp: "0.0.0.0/0"
          Description: HTTP
          IpProtocol: TCP
          FromPort: 80
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          Description: SSH
          IpProtocol: TCP
          FromPort: 22
          ToPort: 22

  EC2ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref EC2Instance

  EC2DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      Name: !Sub game.${DomainName}.
      Type: A
      TTL: 900
      ResourceRecords:
      - !GetAtt EC2ElasticIP.PublicIp

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL

  ServerStartFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 60
      CodeUri: functions/server/start
      Handler: main.lambda_handler
      Environment:
        Variables:
          DNS_RECORD: !Ref EC2DnsRecord
      #     INSTANCE_ID: !Ref EC2Instance
      # Policies:
      #   Version: "2012-10-17"
      #   Statement:
      #     - Effect: Allow
      #       Action:
      #         - ec2:DescribeInstances
      #       Resource: "*"
      #     - Effect: Allow
      #       Action:
      #         - ec2:StartInstances
      #       Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${EC2Instance}
      Events:
        Start:
          Type: Api
          Properties:
            Path: /server/start
            Method: get
            RestApiId:
              Ref: Api

  ServerStopFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 60
      CodeUri: functions/server/stop
      Handler: main.lambda_handler
      # Environment:
      #   Variables:
      #     INSTANCE_ID: !Ref EC2Instance
      # Policies:
      #   Version: "2012-10-17"
      #   Statement:
      #     - Effect: Allow
      #       Action:
      #         - ec2:DescribeInstances
      #       Resource: "*"
      #     - Effect: Allow
      #       Action:
      #         - ec2:StopInstances
      #       Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${EC2Instance}
      Events:
        Stop:
          Type: Api
          Properties:
            Path: /server/stop
            Method: get
            RestApiId:
              Ref: Api

  ApiDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      Name: !Sub api.${DomainName}.
      Type: CNAME
      TTL: 900
      ResourceRecords:
      - !Sub "${Api}.execute-api.${AWS::Region}.amazonaws.com"
